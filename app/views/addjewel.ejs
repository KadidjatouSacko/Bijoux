<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Ajouter un bijou | Administration</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/addjewel.css">
</head>

<body>
  <%- include('partials/nav-bar-admin.ejs') %>

  <header>
    <div class="container">
      <div class="logo">
        <h1>ÉLÉGANCE</h1>
        <span>ADMINISTRATION</span>
      </div>
    </div>
  </header>

  <section class="admin-section">
    <div class="container">
      <div class="section-title">
        <h2>Ajouter un nouveau bijou</h2>
      </div>

      <form id="jewelForm" action="/ajouter-bijou" method="POST" enctype="multipart/form-data">
        <div class="form-card">

          <!-- Informations générales -->
          <div class="form-section">
            <h3 class="form-section-title">Informations générales</h3>
            <div class="form-grid">
              <div class="form-group">
                <label for="name" class="required">Nom du bijou</label>
                <input type="text" id="name" name="name" required>
              </div>

              <div class="form-group">
                <label for="category" class="required">Catégorie</label>
                <div class="input-group">
                  <select id="category" name="category_id" required>
                    <option value="">-- Sélectionner une catégorie --</option>
                    <% categories.forEach(category => { %>
                      <option value="<%= category.id %>"><%= category.name %></option>
                    <% }) %>
                  </select>
                  <button type="button" class="new-category-btn" onclick="toggleNewCategoryForm()">+</button>
                </div>

                <div id="newCategoryForm" class="new-category-form" style="display: none;">
                  <div class="form-group" style="margin-bottom: 15px;">
                    <label for="newCategory" class="required">Nouvelle catégorie</label>
                    <input type="text" id="newCategory" name="newCategory" placeholder="Nom de la catégorie">
                  </div>
                  <button type="button" class="btn btn-primary btn-sm" onclick="addNewCategory()">Ajouter cette catégorie</button>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="description">Description</label>
              <textarea id="description" name="description" placeholder="Description détaillée du bijou..."></textarea>
            </div>
          </div>

          <!-- Caractéristiques -->
                <!-- Caractéristiques -->
            <div class="form-section">
                <h3 class="form-section-title">Caractéristiques</h3>
                <div class="form-grid">
                <div class="form-group">
                    <label for="taille">Taille</label>
                    <input type="text" id="taille" name="taille" placeholder="Ex: 16 cm, M, etc.">
                </div>
            
                <div class="form-group">
                    <label for="poids">Poids (grammes)</label>
                    <input type="number" id="poids" name="poids" min="0" step="0.01" placeholder="Ex: 4.5">
                </div>
            

                <!-- Structure pour la nouvelle matière -->
<div class="form-group">
    <label for="matiere" class="required">Matière</label>
    <div class="input-group">
    <select id="matiere" name="matiere" required>
        <option value="">-- Sélectionner une matière --</option>
        <% materials.forEach(material => { %>
        <option value="<%= material.name %>"><%= material.name %></option>
        <% }) %>
    </select>
    <button type="button" class="new-material-btn" onclick="toggleNewMaterialForm()">+</button>
    </div>

    <div id="newMaterialForm" class="new-material-form" style="display: none;">
    <div class="form-group" style="margin-bottom: 15px;">
        <label for="newMaterial" class="required">Nouvelle matière</label>
        <input type="text" id="newMaterial" name="newMaterial" placeholder="Nom de la matière">
    </div>
    <button type="button" class="btn btn-primary btn-sm" onclick="addNewMaterial()">Ajouter cette matière</button>
    </div>
</div>

<!-- Structure pour le nouveau type -->
<div class="form-group">
    <label for="type" class="required">Type</label>
    <div class="input-group">
    <select id="type" name="type_id" required>
        <option value="">-- Sélectionner un type --</option>
        <% types.forEach(type => { %>
        <option value="<%= type.id %>"><%= type.name %></option>
        <% }) %>
    </select>
    <button type="button" class="new-category-btn" onclick="toggleNewTypeForm()">+</button>
    </div>

    <div id="newTypeForm" class="new-type-form" style="display: none;">
    <div class="form-group" style="margin-bottom: 15px;">
        <label for="newType" class="required">Nouveau type</label>
        <input type="text" id="newType" name="newType" placeholder="Nom du type">
    </div>
    <button type="button" class="btn btn-primary btn-sm" onclick="addNewType()">Ajouter ce type</button>
    </div>
</div>



      <div class="form-group">
        <label for="carat">Carat</label>
        <select id="carat" name="carat">
          <option value="">-- Sélectionner --</option>
          <option value="9">9 carats</option>
          <option value="14">14 carats</option>
          <option value="18">18 carats</option>
          <option value="22">22 carats</option>
          <option value="24">24 carats</option>
        </select>
      </div>
    </div>
  </div>
  

          <!-- Tarification -->
          <div class="form-section">
            <h3 class="form-section-title">Tarification</h3>
            <div class="form-row">
              <div class="form-group">
                <label for="priceTTC" class="required">Prix TTC (€)</label>
                <input type="number" id="priceTTC" name="price_ttc" min="0" step="0.01" required onchange="calculatePriceHT()">
              </div>

              <div class="form-group">
                <label for="tva" class="required">Taux de TVA (%)</label>
                <input type="number" id="tva" name="tva" min="0" step="0.1" value="20" required onchange="calculatePriceHT()">
              </div>

              <div class="form-group">
                <label for="priceHT">Prix HT (€)</label>
                <input type="number" id="priceHT" name="price_ht" step="0.01" readonly>
                <span class="form-help">Calculé automatiquement</span>
              </div>
            </div>

            <div class="form-group" style="margin-top: 20px;">
              <label for="stock" class="required">Stock disponible</label>
              <input type="number" id="stock" name="stock" min="0" value="0" required>
            </div>
          </div>

          <!-- Images -->
          <div class="form-section">
            <h3 class="form-section-title">Images du produit</h3>
            <div class="form-group">
              <label for="images">
                Ajouter des images <span class="info-icon" data-tooltip="Ajoutez la photo principale et différents angles du bijou">i</span>
              </label>
              <div id="imagePreviewContainer" class="image-preview-container">
                <div class="add-image-container" onclick="document.getElementById('imageUpload').click()">
                  <span class="add-image-icon">+</span>
                  <input type="file" id="imageUpload" name="images" accept="image/*" multiple style="display: none;" onchange="handleImageUpload(this)">
                </div>
              </div>
              <p class="form-help">Pour un rendu optimal, utilisez des images carrées avec une résolution minimale de 800×800px</p>
              <p class="form-help"><strong>Note:</strong> La première image ajoutée sera l'image principale du bijou, ou cliquez sur une image pour la définir comme principale.</p>
              <!-- Champ caché pour stocker l'image principale -->
              <input type="hidden" id="imageData" name="image">
              <!-- Le champ pour les images additionnelles sera ajouté dynamiquement par JavaScript -->
            </div>
          </div>
          

          <!-- Boutons -->
          <div class="buttons">
            <button type="button" class="btn btn-secondary" onclick="resetForm()">Annuler</button>
            <button type="submit" class="btn btn-primary">Ajouter le bijou</button>
          </div>

        </div>
      </form>

      <!-- Ajout de type (en dehors du formulaire principal) -->
      <div class="form-section">
        <h3 class="form-section-title">Ajouter un type</h3>
        <form id="add-type-form" action="/ajouter-type" method="POST">
          <div class="form-row">
            <select id="category-select" name="categoryId" required>
              <% categories.forEach(category => { %>
                <option value="<%= category.id %>"><%= category.name %></option>
              <% }) %>
            </select>
            <input type="text" id="new-type-name" name="typeName" placeholder="Nom du type..." required>
            <button type="submit" class="btn btn-primary">+</button>
          </div>
        </form>

        <ul id="type-list">
          <% types.forEach(type => { %>
            <li><%= type.name %></li>
          <% }) %>
        </ul>
      </div>

    </div>
  </section>

    <script src="js/addjewel.js"></script>
    <script>
        // public/js/addjewel.js

document.addEventListener('DOMContentLoaded', function() {
    // Initialisation du calcul du prix HT
    calculatePriceHT();
    
    // Formulaire d'ajout de bijou
    const jewelForm = document.getElementById('jewelForm');
    if (jewelForm) {
        jewelForm.addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
            }
        });
    }
});

/**
 * Calcule le prix HT en fonction du prix TTC et du taux de TVA
 */
function calculatePriceHT() {
    const priceTTC = parseFloat(document.getElementById('priceTTC').value) || 0;
    const tva = parseFloat(document.getElementById('tva').value) || 20;
    
    if (priceTTC > 0) {
        const priceHT = priceTTC / (1 + (tva / 100));
        document.getElementById('priceHT').value = priceHT.toFixed(2);
    } else {
        document.getElementById('priceHT').value = '';
    }
}

/**
 * Affiche/masque le formulaire d'ajout de catégorie
 */
function toggleNewCategoryForm() {
    const form = document.getElementById('newCategoryForm');
    form.style.display = form.style.display === 'block' ? 'none' : 'block';
    
    if (form.style.display === 'block') {
        document.getElementById('newCategory').focus();
    }
}

/**
 * Affiche/masque le formulaire d'ajout de matière
 */
function toggleNewMaterialForm() {
    const form = document.getElementById('newMaterialForm');
    form.style.display = form.style.display === 'block' ? 'none' : 'block';
    
    if (form.style.display === 'block') {
        document.getElementById('newMaterial').focus();
    }
}

/**
 * Ajoute une nouvelle catégorie via AJAX
 */
function addNewCategory() {
    const categoryName = document.getElementById('newCategory').value.trim();
    
    if (!categoryName) {
        alert('Veuillez saisir un nom de catégorie');
        return;
    }
    
    // Appel AJAX pour ajouter la catégorie
    fetch('/ajouter-categorie', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: categoryName })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Ajout de l'option au select
            const select = document.getElementById('category');
            const option = document.createElement('option');
            option.value = data.category.id;
            option.textContent = data.category.name;
            select.appendChild(option);
            
            // Sélection de la nouvelle option
            select.value = data.category.id;
            
            // Masquage du formulaire et réinitialisation
            document.getElementById('newCategoryForm').style.display = 'none';
            document.getElementById('newCategory').value = '';
            
            // Message de confirmation
            alert('Catégorie ajoutée avec succès !');
        } else {
            alert(data.message || 'Une erreur est survenue');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('Une erreur est survenue lors de l\'ajout de la catégorie');
    });
}

/**
 * Ajoute une nouvelle matière à la liste
 */
 function addNewMaterial() {
    const materialName = document.getElementById('newMaterial').value.trim();
    
    if (!materialName) {
        alert('Veuillez saisir un nom de matière');
        return;
    }
    
    // Vérification si la matière existe déjà
    const select = document.getElementById('matiere');
    for (let i = 0; i < select.options.length; i++) {
        if (select.options[i].textContent.toLowerCase() === materialName.toLowerCase()) {
            alert('Cette matière existe déjà');
            select.value = select.options[i].value;
            document.getElementById('newMaterialForm').style.display = 'none';
            return;
        }
    }
    
    // Envoi de la nouvelle matière au serveur via AJAX
    fetch('/ajouter-matiere', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: materialName })  // Envoi du nom de la matière
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Si le serveur a ajouté la matière, ajoute-la à la liste déroulante
            const option = document.createElement('option');
            option.value = materialName;
            option.textContent = materialName;
            select.appendChild(option);
            
            // Sélection de la nouvelle matière
            select.value = materialName;
            
            // Masquage du formulaire et réinitialisation
            document.getElementById('newMaterialForm').style.display = 'none';
            document.getElementById('newMaterial').value = '';
        } else {
            alert('Erreur lors de l\'ajout de la matière');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur de communication avec le serveur');
    });
}

/**
 * Gère l'upload et la prévisualisation des images
 */
 function handleImageUpload(input) {
    if (input.files && input.files.length > 0) {
        const previewContainer = document.getElementById('imagePreviewContainer');
        const addImageContainer = previewContainer.querySelector('.add-image-container');
        
        // Limiter le nombre d'images à 5
        const maxImages = 5;
        let currentImages = previewContainer.querySelectorAll('.image-preview').length;
        
        for (let i = 0; i < Math.min(input.files.length, maxImages - currentImages); i++) {
            const file = input.files[i];
            
            if (!file.type.match('image.*')) {
                continue;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                // Création de la div de prévisualisation
                const previewDiv = document.createElement('div');
                previewDiv.className = 'image-preview';
                
                // Image de prévisualisation
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Aperçu image";
                previewDiv.appendChild(img);
                
                // Bouton de suppression
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'remove-image';
                removeBtn.innerHTML = '&times;';
                removeBtn.onclick = function() {
                    previewContainer.removeChild(previewDiv);
                    // Mise à jour de l'image principale
                    updateMainImage();
                };
                previewDiv.appendChild(removeBtn);
                
                // Insertion avant le bouton d'ajout
                // Retrait du conteneur d'ajout pour le remettre à la fin
                previewContainer.removeChild(addImageContainer);
                // Ajout de la prévisualisation
                previewContainer.appendChild(previewDiv);
                // Remise du conteneur d'ajout à la fin
                previewContainer.appendChild(addImageContainer);
                
                // Si c'est la première image, on la stocke dans le champ caché
                updateMainImage();
            };
            
            reader.readAsDataURL(file);
        }
        
        // Réinitialiser l'input file pour permettre de sélectionner à nouveau les mêmes fichiers
        input.value = '';
    }
}

/**
 * Met à jour l'image principale (première image) dans le champ caché
 */
function updateMainImage() {
    const previews = document.querySelectorAll('.image-preview img');
    const imageDataField = document.getElementById('imageData');
    
    if (previews.length > 0) {
        imageDataField.value = previews[0].src;
    } else {
        imageDataField.value = '';
    }
}

/**
 * Validation du formulaire avant envoi
 */
/**
 * Validation du formulaire avant envoi (mise à jour)
 */
 function validateForm() {
    const requiredFields = [
        { id: 'name', message: 'Le nom du bijou est obligatoire' },
        { id: 'category', message: 'Veuillez sélectionner une catégorie' },
        { id: 'matiere', message: 'Veuillez sélectionner une matière' },
        { id: 'type', message: 'Veuillez sélectionner un type' },
        { id: 'priceTTC', message: 'Le prix TTC est obligatoire' }
    ];
    
    for (const field of requiredFields) {
        const element = document.getElementById(field.id);
        if (!element.value) {
            alert(field.message);
            element.focus();
            return false;
        }
    }
    
    // Vérification que le prix est positif
    const priceTTC = parseFloat(document.getElementById('priceTTC').value);
    if (priceTTC <= 0) {
        alert('Le prix doit être supérieur à 0');
        document.getElementById('priceTTC').focus();
        return false;
    }
    
    // Vérification qu'une image au moins a été téléchargée
    const imageData = document.getElementById('imageData').value;
    if (!imageData) {
        alert('Veuillez ajouter au moins une image');
        return false;
    }
    
    return true;
}
/**
 * Réinitialisation du formulaire
 */
function resetForm() {
    if (confirm('Êtes-vous sûr de vouloir annuler ? Toutes les informations saisies seront perdues.')) {
        document.getElementById('jewelForm').reset();
        
        // Réinitialisation des prévisualisations d'images
        const previewContainer = document.getElementById('imagePreviewContainer');
        const previews = previewContainer.querySelectorAll('.image-preview');
        previews.forEach(preview => {
            previewContainer.removeChild(preview);
        });
        
        // Réinitialisation du champ caché
        document.getElementById('imageData').value = '';
        
        // Recalcul du prix HT
        calculatePriceHT();
    }
}

const imageInput = document.getElementById('images');
  const previewContainer = document.getElementById('preview-container');

  imageInput.addEventListener('change', () => {
    previewContainer.innerHTML = ''; // Clear previous previews

    Array.from(imageInput.files).forEach(file => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.style.maxWidth = '150px';
        img.style.margin = '10px';
        previewContainer.appendChild(img);
      };

      reader.readAsDataURL(file);
    });


  document.querySelector('#add-type-form').addEventListener('submit', async function (e) {
    e.preventDefault();

    const typeName = document.querySelector('#new-type-name').value.trim();
    const categoryId = document.querySelector('#category-select').value;

    if (!typeName) return alert('Veuillez entrer un nom de type');

    const response = await fetch('/ajouter-types', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ name: typeName, categoryId })
    });

    const result = await response.json();
    if (response.ok) {
      const li = document.createElement('li');
      li.textContent = result.name;
      document.querySelector('#type-list').appendChild(li);
      document.querySelector('#new-type-name').value = '';
    } else {
      alert(result.message || 'Erreur');
    }
  });

    // Attendez que le DOM soit entièrement chargé
    document.addEventListener("DOMContentLoaded", function() {
    const btnAddType = document.querySelector(".add-type");  // Ciblage du bouton "+"
    const formType = document.querySelector(".form-add-type");  // Ciblage du formulaire caché

    if (btnAddType && formType) {
      // Ajoutez un écouteur d'événement sur le bouton "+"
      btnAddType.addEventListener("click", function() {
        // Toggle de la visibilité du formulaire
        formType.classList.toggle("d-none");
      });
    }
  });

  function toggleNewTypeForm() {
    const form = document.getElementById('newTypeForm');
    form.style.display = form.style.display === 'block' ? 'none' : 'block';
    
    if (form.style.display === 'block') {
        document.getElementById('newType').focus();
    }
}

    /**
 * Ajoute un nouveau type à la liste
 */
    /**
 * Ajoute un nouveau type à la liste
 */
function addNewType() {
    const typeName = document.getElementById('newType').value.trim();
    const categoryId = document.getElementById('category').value;
    
    if (!typeName) {
        alert('Veuillez saisir un nom de type');
        return;
    }
    
    if (!categoryId) {
        alert('Veuillez d\'abord sélectionner une catégorie');
        return;
    }
    
    // Vérification si le type existe déjà
    const select = document.getElementById('type');
    for (let i = 0; i < select.options.length; i++) {
        if (select.options[i].textContent.toLowerCase() === typeName.toLowerCase()) {
            alert('Ce type existe déjà');
            select.value = select.options[i].value;
            document.getElementById('newTypeForm').style.display = 'none';
            return;
        }
    }
    
    // Envoi du nouveau type au serveur via AJAX
    fetch('/ajouter-types', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
            name: typeName,
            categoryId: categoryId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Si le serveur a ajouté le type, ajoute-le à la liste déroulante
            const option = document.createElement('option');
            option.value = data.type.id;
            option.textContent = data.type.name;
            select.appendChild(option);
            
            // Sélection du nouveau type
            select.value = data.type.id;
            
            // Masquage du formulaire et réinitialisation
            document.getElementById('newTypeForm').style.display = 'none';
            document.getElementById('newType').value = '';
            
            // Message de confirmation
            alert('Type ajouté avec succès !');
            
            // Mise à jour de la liste des types en bas de page (si elle existe)
            const typeList = document.getElementById('type-list');
            if (typeList) {
                const li = document.createElement('li');
                li.textContent = data.type.name;
                typeList.appendChild(li);
            }
        } else {
            alert(data.message || 'Erreur lors de l\'ajout du type');
        }
    })
    .catch(error => {
        console.error('Erreur:', error);
        alert('Erreur de communication avec le serveur');
    });
}


// Script à ajouter dans votre page d'ajout de bijou
document.addEventListener('DOMContentLoaded', function() {
  // Variables globales
  let mainImageSet = false;
  let additionalImages = [];
  
  // Gestionnaire d'upload pour les images
  window.handleImageUpload = function(input) {
    if (input.files && input.files.length > 0) {
      for (let i = 0; i < input.files.length; i++) {
        const file = input.files[i];
        const reader = new FileReader();
        
        reader.onload = function(e) {
          const imageData = e.target.result;
          
          // Créer un élément de prévisualisation
          const previewContainer = document.createElement('div');
          previewContainer.className = 'image-preview';
          
          const previewImage = document.createElement('img');
          previewImage.src = imageData;
          previewImage.className = 'preview-img';
          
          const removeButton = document.createElement('button');
          removeButton.className = 'remove-image';
          removeButton.innerHTML = '&times;';
          removeButton.type = 'button';
          
          previewContainer.appendChild(previewImage);
          previewContainer.appendChild(removeButton);
          
          // Insérer avant le bouton d'ajout
          const addButton = document.querySelector('.add-image-container');
          document.getElementById('imagePreviewContainer').insertBefore(previewContainer, addButton);
          
          // Si c'est la première image, elle devient l'image principale
          if (!mainImageSet) {
            document.getElementById('imageData').value = imageData;
            previewContainer.classList.add('main-image');
            mainImageSet = true;
          } else {
            // Sinon, c'est une image additionnelle
            additionalImages.push(imageData);
            
            // Mettre à jour le champ caché pour les images additionnelles
            updateAdditionalImagesField();
          }
          
          // Ajouter un gestionnaire d'événements pour le bouton de suppression
          removeButton.addEventListener('click', function() {
            // Vérifier si c'est l'image principale
            if (previewContainer.classList.contains('main-image')) {
              mainImageSet = false;
              document.getElementById('imageData').value = '';
              
              // Si des images additionnelles existent, promouvoir la première
              if (additionalImages.length > 0) {
                const firstAdditionalImage = additionalImages.shift();
                document.getElementById('imageData').value = firstAdditionalImage;
                mainImageSet = true;
                
                // Mettre à jour les classes
                const firstAdditionalImageContainer = document.querySelectorAll('.image-preview:not(.main-image)')[0];
                if (firstAdditionalImageContainer) {
                  firstAdditionalImageContainer.classList.add('main-image');
                }
                
                updateAdditionalImagesField();
              }
            } else {
              // Trouver l'index de l'image dans le tableau
              const imgSrc = previewImage.src;
              const imgIndex = additionalImages.findIndex(src => src === imgSrc);
              if (imgIndex !== -1) {
                additionalImages.splice(imgIndex, 1);
                updateAdditionalImagesField();
              }
            }
            
            // Supprimer l'élément de prévisualisation
            previewContainer.remove();
          });
          
          // Permettre de définir une image comme principale en cliquant dessus
          previewImage.addEventListener('click', function() {
            if (!previewContainer.classList.contains('main-image')) {
              // Rétrograder l'image principale actuelle
              const currentMainImage = document.querySelector('.image-preview.main-image');
              if (currentMainImage) {
                currentMainImage.classList.remove('main-image');
                // Ajouter l'ancienne image principale aux images additionnelles
                const oldMainImageSrc = document.getElementById('imageData').value;
                additionalImages.push(oldMainImageSrc);
              }
              
              // Promouvoir cette image comme principale
              previewContainer.classList.add('main-image');
              document.getElementById('imageData').value = imageData;
              
              // Retirer cette image des images additionnelles
              const imgIndex = additionalImages.findIndex(src => src === imageData);
              if (imgIndex !== -1) {
                additionalImages.splice(imgIndex, 1);
              }
              
              updateAdditionalImagesField();
            }
          });
        };
        
        reader.readAsDataURL(file);
      }
    }
  };
  
  // Fonction pour mettre à jour le champ caché des images additionnelles
  function updateAdditionalImagesField() {
    // Vérifier si l'élément existe déjà, sinon le créer
    let additionalImagesField = document.getElementById('additionalImagesData');
    if (!additionalImagesField) {
      additionalImagesField = document.createElement('input');
      additionalImagesField.type = 'hidden';
      additionalImagesField.id = 'additionalImagesData';
      additionalImagesField.name = 'additionalImages';
      document.querySelector('form').appendChild(additionalImagesField);
    }
    
    // Mettre à jour la valeur
    additionalImagesField.value = JSON.stringify(additionalImages);
  }
});

// Script pour la page de détail du bijou - gestion de la galerie
document.addEventListener('DOMContentLoaded', function() {
  // Éléments DOM
  const mainImage = document.getElementById('mainImage');
  const thumbnails = document.querySelectorAll('.thumbnail');
  const prevBtn = document.querySelector('.prev-btn');
  const nextBtn = document.querySelector('.next-btn');
  
  // Variables
  let currentIndex = 0;
  const totalImages = thumbnails.length;
  
  // Fonction pour changer l'image principale
  function changeMainImage(index) {
    if (index < 0) {
      index = totalImages - 1;
    } else if (index >= totalImages) {
      index = 0;
    }
    
    currentIndex = index;
    
    // Mettre à jour l'image principale
    const newSrc = thumbnails[index].getAttribute('src');
    mainImage.src = newSrc;
    
    // Mettre à jour les classes actives des miniatures
    thumbnails.forEach(thumb => thumb.classList.remove('active'));
    thumbnails[index].classList.add('active');
  }
  
  // Gestionnaires d'événements pour les boutons de navigation
  if (prevBtn) {
    prevBtn.addEventListener('click', function() {
      changeMainImage(currentIndex - 1);
    });
  }
  
  if (nextBtn) {
    nextBtn.addEventListener('click', function() {
      changeMainImage(currentIndex + 1);
    });
  }
  
  // Gestionnaires d'événements pour les miniatures
  thumbnails.forEach((thumbnail, index) => {
    thumbnail.addEventListener('click', function() {
      changeMainImage(index);
    });
  });
});


  });
    </script>
</body>
</html>
